name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  lint-and-test:
    name: Lint & Test (basic tier)
    runs-on: ubuntu-latest
    timeout-minutes: 25
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            requirements-basic.txt
            requirements-intermediate.txt
            requirements-advanced.txt
            requirements-full.txt

      - name: Upgrade pip tooling
        run: |
          python -m pip install --upgrade pip setuptools wheel

      - name: Install basic tier
        run: |
          python -m pip install -r requirements-basic.txt

      - name: Cache pre-commit
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: ${{ runner.os }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pre-commit-

      - name: Lint (flake8)
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || true
          flake8 . --count --exit-zero --max-complexity=12 --max-line-length=120 --statistics

      - name: Format check (black)
        run: |
          python -m black --check .

      - name: Run pre-commit on all files
        run: |
          pre-commit run --all-files --show-diff-on-failure

      - name: Verify dataset path conventions
        run: |
          python verify_dataset_paths.py --format json --fail-on error

      - name: Test dataset enhancements
        run: |
          python datasets/test_dataset_enhancements.py

      - name: Validate synthetic dataset generation
        run: |
          python datasets/download_semiconductor_datasets.py --dataset synthetic --datasets-dir /tmp/ci_datasets
          python datasets/data_validation.py --datasets-root /tmp/ci_datasets --dataset synthetic

      - name: Run Phase 1 - Module-Specific Unit Tests (81 tests)
        run: |
          # Module 1 tests (20 tests)
          python -m pytest modules/foundation/module-1/test_1_1_wafer_analysis.py -v
          python -m pytest modules/foundation/module-1/test_1_2_statistical_tools.py -v

          # Module 2 tests (20 tests)
          python -m pytest modules/foundation/module-2/test_2_1_data_quality.py -v
          python -m pytest modules/foundation/module-2/test_2_3_advanced_stats.py -v

          # Module 4 tests (25 tests - multilabel)
          python -m pytest modules/foundation/module-4/test_4_3_multilabel.py -v

          # Module 9 tests (32 tests - real-time inference)
          python -m pytest modules/cutting-edge/module-9/test_9_3_realtime_inference.py -v

          # Module 11 tests (24 tests - edge deployment)
          python -m pytest modules/cutting-edge/module-11/test_11_1_edge_deployment.py -v || true

          # Existing pipeline tests
          python modules/intermediate/module-4/test_ensemble_pipeline.py || true
          if [ -f test_regression_pipeline.py ]; then python test_regression_pipeline.py; fi

      - name: Run Phase 2 - Assessment System Tests (32 tests)
        run: |
          # Assessment validation (28 tests)
          python -m pytest assessments/test_assessment_validation.py -v

          # Assessment grading tests (4 tests)
          python -m pytest assessments/test_assessment_grading.py -v

      - name: Run Phase 3 - Notebook Execution Tests (88 tests)
        run: |
          # Priority notebooks execution (88 tests total)
          python -m pytest tests/test_notebook_execution.py -v -k "test_module_1" || true
          python -m pytest tests/test_notebook_execution.py -v -k "test_module_2" || true
          python -m pytest tests/test_notebook_execution.py -v -k "test_module_3" || true

      - name: Generate test coverage report
        run: |
          python -m pytest --cov=modules --cov=assessments --cov-report=html --cov-report=term -v || true

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/
          retention-days: 30

      - name: Basic import smoke
        run: |
          python - <<'EOF'
          import sys, sklearn, numpy, pandas
          print('Python:', sys.version)
          print('sklearn:', sklearn.__version__)
          print('numpy:', numpy.__version__)
          print('pandas:', pandas.__version__)
          print('\nâœ… All imports successful')
          EOF

  # Future extension: matrix tiers (uncomment to enable broader coverage)
  # tier-matrix:
  #   name: Matrix Tiers
  #   runs-on: ubuntu-latest
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       tier: [basic, intermediate, advanced]
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-python@v5
  #       with:
  #         python-version: '3.11'
  #         cache: 'pip'
  #     - name: Install tier
  #       run: |
  #         python env_setup.py --tier ${{ matrix.tier }}
  #     - name: Smoke test
  #       run: python -c "import numpy, sklearn; print('OK')"
